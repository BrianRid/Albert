// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    flats         Flat[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Flat {
  id                    Int                    @id @default(autoincrement())
  name                  String
  city                  String
  surface               Float
  nb_rooms              Int
  rent_amount           Float
  contract_type         String
  status                String
  need_refresh          Boolean
  location              String
  userId               String
  user                  User                   @relation(fields: [userId], references: [id])
  leaseAgreements       LeaseAgreement[]
  financialTransactions FinancialTransaction[]
  tenants               TenantFlat[]
}

model LeaseAgreement {
  id               Int              @id @default(autoincrement())
  start_date       DateTime
  end_date         DateTime
  rent_amount      Float
  deposit_amount   Float
  flat_id          Int
  flat             Flat             @relation(fields: [flat_id], references: [id])
  paymentHistories PaymentHistory[]
}

model Tenant {
  id                Int              @id @default(autoincrement())
  first_name        String
  last_name         String
  email             String           @unique
  phone_number      String
  emergency_contact String
  entry_date        DateTime
  exit_date         DateTime?
  flats             TenantFlat[]
  paymentHistories  PaymentHistory[]
}

model TenantFlat {
  id        Int    @id @default(autoincrement())
  flat_id   Int
  tenant_id Int
  flat      Flat   @relation(fields: [flat_id], references: [id])
  tenant    Tenant @relation(fields: [tenant_id], references: [id])
}

model FinancialTransaction {
  id               Int              @id @default(autoincrement())
  transaction_type String
  amount           Float
  transaction_date DateTime
  flat_id          Int
  flat             Flat             @relation(fields: [flat_id], references: [id])
  paymentHistories PaymentHistory[]
}

model PaymentHistory {
  id                   Int                  @id @default(autoincrement())
  payment_date         DateTime
  amount_paid          Float
  payment_status       String
  payment_method       String
  tenant_id            Int
  tenant               Tenant               @relation(fields: [tenant_id], references: [id])
  lease_agreement_id   Int
  leaseAgreement       LeaseAgreement       @relation(fields: [lease_agreement_id], references: [id])
  transaction_id       Int
  financialTransaction FinancialTransaction @relation(fields: [transaction_id], references: [id])
}
